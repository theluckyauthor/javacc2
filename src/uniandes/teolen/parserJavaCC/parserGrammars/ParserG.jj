/**
 * JavaCC file
 */
 
options {
  IGNORE_CASE = false;
  STATIC = false;
}
PARSER_BEGIN(ParserG)
package uniandes.teolen.parserJavaCC.parserGrammars;

import java.util.*;
 
public class ParserG {

} 
 
PARSER_END(ParserG)

SKIP :
{
 	" " | "\r" | "\t" | "\n"
}
TOKEN : /* OPERATORS */
{
    <ARROW: "::=">
}

TOKEN :
{
    < INT: ( <DIGIT> )+ >
|   < #DIGIT: "0" | "1" | "2"| "3" | "4" | "5" |  "6" | "7" | "8" |"9" >
|   < #MAY: ["A"-"Z"] >
|   < #MIN: ["a"-"z"] >
|   < RegI : "RegI" >
|   < RegD : "RegD" >
|   < DC : "DC" >
|   < IC : "IC" >
|   < NTerm: ( <MAY>  ( <MAY > | < MIN > | < DIGIT > )* )>
|   < Term: ( <MIN>  ( <MAY > | < MIN >| < DIGIT >)* )>


}



void gram():
{}
{<RegD>  ":"  (prodRD() ";")+  
|  <RegI>  ":"  (prodRI() ";")+  


|  <DC >  ":"  (prod() ";")+
|  < IC >  ":"  (prodI() ";")+
}


void prodI():
{}
{
    < NTerm >  <ARROW > ("$" |  (sim())+)
}

void prodRD():
{}
{
    < NTerm >  <ARROW > ("$" |  (< Term >)* (< NTerm >| < Term >))
}

void prodRI():
{}
{
    < NTerm >  <ARROW > ("$" | (< NTerm >| < Term >) (< Term >)*) 
}


void prod():
{}
{
   p()(sim())*
   
}


void p():
{}
{
  <Term> p() sim()  |   <NTerm> p1() sim() 
}
void p1():
{}
{
  (sim() p1() sim() | < ARROW > )  
}


void sim():
{}
{
     <Term>| <NTerm>
}


  
